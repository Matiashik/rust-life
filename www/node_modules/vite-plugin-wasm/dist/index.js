"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const parse_wasm_1 = require("./parse-wasm");
const wasmHelper = __importStar(require("./wasm-helper"));
function wasm() {
    let resolvedConfig;
    let originalWasmPlugin;
    return {
        name: "vite-plugin-wasm",
        enforce: "pre",
        configResolved(config) {
            resolvedConfig = config;
            originalWasmPlugin = resolvedConfig.plugins.find(plugin => plugin.name === "vite:wasm-helper");
        },
        resolveId(id) {
            if (id === wasmHelper.id) {
                return id;
            }
        },
        async load(id) {
            if (id === wasmHelper.id) {
                return `export default ${wasmHelper.code}`;
            }
            if (!id.toLowerCase().endsWith(".wasm")) {
                return;
            }
            const { imports, exports } = await (0, parse_wasm_1.parseWasm)(id);
            // Make a call to Vite's internal `fileToUrl` function by calling Vite's original WASM plugin's load()
            const originalLoadResult = (await originalWasmPlugin.load.call(this, id + "?init"));
            const url = JSON.parse(/".+"/g.exec(originalLoadResult.trim().split("\n")[1])[0]);
            return `
import __vite__initWasm from "${wasmHelper.id}"
${imports
                .map(({ from, names }, i) => `import { ${names.map((name, j) => `${name} as __vite__wasmImport_${i}_${j}`).join(", ")} } from ${JSON.stringify(from)};`)
                .join("\n")}
const __vite__wasmModule = await __vite__initWasm({ ${imports
                .map(({ from, names }, i) => `${JSON.stringify(from)}: { ${names.map((name, j) => `${name}: __vite__wasmImport_${i}_${j}`).join(", ")} }`)
                .join(", ")} }, ${JSON.stringify(url)});
${exports
                .map(name => `export ${name === "default" ? "default" : `const ${name} =`} __vite__wasmModule.${name};`)
                .join("\n")}
`;
        }
    };
}
exports.default = wasm;
